name: PR comments

on:
  workflow_call:
    inputs:
      netlify_deploy_id:
        type: string
      netlify_deploy_url:
        type: string
      vercel:
        type: string

jobs:
  comment:
    name: "Add comment"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: ${{ github.event.pull_request.state == 'open'}}

    steps:
      - name: "Prepare Netlify comment section"
        id: netlify
        if: ${{ inputs.netlify_deploy_id && inputs.netlify_deploy_url }}
        run: |
          logs="https://app.netlify.com/sites/go-webpush/deploys/${{ inputs.netlify_deploy_id }}"
          function_logs="https://app.netlify.com/sites/go-webpush/logs/functions?scope=deploy:${{ inputs.netlify_deploy_id }}"
          edge_function_logs="https://app.netlify.com/sites/go-webpush/logs/edge-functions?scope=deployid:${{ inputs.netlify_deploy_id }}"

          echo "content=$(cat << EOF
          ## Netlify deployment `${{ inputs.netlify_deploy_id }}`

          | **Deployment Preview** | [**${{ inputs.netlify_deploy_url }}**](${{ inputs.netlify_deploy_url }})             |
          | ---------------------- | ------------------------------------------ |
          | **Deployment Logs**    | [$logs]($logs)                             |
          | **Function Logs**      | [$function_logs]($function_logs)           |
          | **Edge Function Logs** | [$edge_function_logs]($edge_function_logs) |

          EOF
          )" >> $GITHUB_OUTPUT

      - name: "Add comment"
        id: comment
        if: ${{ steps.netlify.outcome == 'success' || steps.vercel.outcome == 'success'}}
        env:
          NETLIFY_SEGMENT: ${{ steps.netlify.outputs.content }}
        uses: actions/github-script@v7
        with:
          script: |
            // Find previous comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const comment = comments.find(({ body }) => body.startsWith('Deployment preview ready!'));

            // Remove comment
            comment && await github.rest.issues.deleteComment({
              comment_id: comment.id,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Assemble comment body
            let body = "Deployment preview ready!";

            const { NETLIFY_SEGMENT } = process.env;

            if (NETLIFY_SEGMENT) {
              body = `${body}\n\n${NETLIFY_SEGMENT}`
            }

            // Add comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body,
            });
